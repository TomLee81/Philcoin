name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 2 * * *' # 매일 새벽 2시에 실행

jobs:
  test-build:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      redis:
        image: redis:6.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20

      - name: Install dependencies
        run: go mod download

      - name: Run linters
        run: |
          go vet ./...
          golangci-lint run

      - name: Run unit tests
        run: |
          go test ./internal/... ./pkg/... -coverprofile=coverage.txt

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: coverage.txt
          flags: unittests
          fail_ci_if_error: true

      - name: Build binary
        run: go build -v -o philcoin-backend ./cmd/server

  deploy-staging:
    needs: test-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to staging via Docker Compose
        run: |
          docker-compose -f docker-compose.staging.yml up -d --build

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to production via Docker Compose
        run: |
          docker-compose -f docker-compose.prod.yml up -d --build